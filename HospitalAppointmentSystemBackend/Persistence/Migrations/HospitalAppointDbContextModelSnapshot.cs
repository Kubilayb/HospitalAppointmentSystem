// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(HospitalAppointDbContext))]
    partial class HospitalAppointDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.BaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "users.read"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "users.write"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "users.add"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "users.update"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "users.delete"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctors.read"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctors.write"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctors.add"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctors.update"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctors.delete"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patients.read"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patients.write"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patients.add"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patients.update"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patients.delete"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctorAvailabilities.read"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctorAvailabilities.write"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctorAvailabilities.add"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctorAvailabilities.update"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "doctorAvailabilities.delete"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patientReports.read"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patientReports.write"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patientReports.add"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patientReports.update"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "patientReports.delete"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "appointments.read"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "appointments.write"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "appointments.add"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "appointments.update"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "appointments.delete"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "departments.read"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "departments.write"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "departments.add"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "departments.update"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "departments.delete"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "operationClaims.read"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "operationClaims.write"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "operationClaims.add"
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "operationClaims.update"
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "operationClaims.delete"
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "userOperationClaims.read"
                        },
                        new
                        {
                            Id = 51,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "userOperationClaims.write"
                        },
                        new
                        {
                            Id = 52,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "userOperationClaims.add"
                        },
                        new
                        {
                            Id = 53,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "userOperationClaims.update"
                        },
                        new
                        {
                            Id = 54,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "userOperationClaims.delete"
                        },
                        new
                        {
                            Id = 56,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "feedbacks.read"
                        },
                        new
                        {
                            Id = 57,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "feedbacks.write"
                        },
                        new
                        {
                            Id = 58,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "feedbacks.add"
                        },
                        new
                        {
                            Id = 59,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "feedbacks.update"
                        },
                        new
                        {
                            Id = 60,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "feedbacks.delete"
                        },
                        new
                        {
                            Id = 62,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "notifications.read"
                        },
                        new
                        {
                            Id = 63,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "notifications.write"
                        },
                        new
                        {
                            Id = 64,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "notifications.add"
                        },
                        new
                        {
                            Id = 65,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "notifications.update"
                        },
                        new
                        {
                            Id = 66,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "notifications.delete"
                        },
                        new
                        {
                            Id = 68,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "supportRequests.read"
                        },
                        new
                        {
                            Id = 69,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "supportRequests.write"
                        },
                        new
                        {
                            Id = 70,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "supportRequests.add"
                        },
                        new
                        {
                            Id = 71,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "supportRequests.update"
                        },
                        new
                        {
                            Id = 72,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "supportRequests.delete"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseUserId");

                    b.HasIndex("OperationClaimId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUserId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 1
                        },
                        new
                        {
                            Id = 13,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 8
                        },
                        new
                        {
                            Id = 14,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 9
                        },
                        new
                        {
                            Id = 15,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 11
                        },
                        new
                        {
                            Id = 16,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 20
                        },
                        new
                        {
                            Id = 17,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 21
                        },
                        new
                        {
                            Id = 18,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 22
                        },
                        new
                        {
                            Id = 19,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 23
                        },
                        new
                        {
                            Id = 20,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 26
                        },
                        new
                        {
                            Id = 21,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 27
                        },
                        new
                        {
                            Id = 22,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 28
                        },
                        new
                        {
                            Id = 23,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 29
                        },
                        new
                        {
                            Id = 24,
                            BaseUserId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OperationClaimId = 32
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorAvailabilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAvailabilityId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorAvailabilityId = 1,
                            EndTime = new DateTime(2024, 6, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PatientId = 1,
                            StartTime = new DateTime(2024, 6, 30, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorAvailabilityId = 1,
                            EndTime = new DateTime(2024, 6, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PatientId = 2,
                            StartTime = new DateTime(2024, 6, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorAvailabilityId = 4,
                            EndTime = new DateTime(2024, 7, 4, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PatientId = 2,
                            StartTime = new DateTime(2024, 7, 4, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deals with diseases of the heart and circulatory system. Treats conditions like heart attacks, hypertension, cardiac rhythm disorders.",
                            IsDeleted = false,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deals with diseases of the nervous system. Treats disorders related to the brain, spinal cord, nerves, and muscles.",
                            IsDeleted = false,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Focuses on bones, joints, muscles, and connective tissues. Treats conditions such as fractures, dislocations, sports injuries.",
                            IsDeleted = false,
                            Name = "Orthopedics and Traumatology"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SpecialistLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "With over 25 years of experience, this distinguished Professor of Orthopedics specializes in orthopedic surgery. They completed their medical degree, residency, and fellowship at prestigious institutions, focusing on innovative surgical techniques and groundbreaking research. A prolific author and keynote speaker, they have contributed extensively to the academic community and are actively involved in mentoring future orthopedic surgeons. They are a respected member of the American Academy of Orthopaedic Surgeons (AAOS). Their clinical interests include joint replacement, sports medicine, and minimally invasive procedures. Known for their compassionate approach, they are dedicated to achieving excellent outcomes for their patients and are committed to community service.",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            IsDeleted = false,
                            SpecialistLevel = "Prof",
                            UserId = 2,
                            YearsOfExperience = 25
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Biography",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            IsDeleted = false,
                            SpecialistLevel = "Doç",
                            UserId = 3,
                            YearsOfExperience = 15
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Biography",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            IsDeleted = false,
                            SpecialistLevel = "Uzm",
                            UserId = 4,
                            YearsOfExperience = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            EndTime = new DateTime(2024, 6, 30, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartTime = new DateTime(2024, 6, 30, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            EndTime = new DateTime(2024, 6, 30, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartTime = new DateTime(2024, 6, 30, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            EndTime = new DateTime(2024, 7, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartTime = new DateTime(2024, 7, 1, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            EndTime = new DateTime(2024, 7, 4, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartTime = new DateTime(2024, 7, 4, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test",
                            IsDeleted = false,
                            Rating = 10,
                            Title = "Test",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test2",
                            IsDeleted = false,
                            Rating = 9,
                            Title = "Test2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test3",
                            IsDeleted = false,
                            Rating = 7,
                            Title = "Test3",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test4",
                            IsDeleted = false,
                            Rating = 5,
                            Title = "Test4",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Message = "Test",
                            NotificationType = 1,
                            SentAt = new DateTime(2024, 6, 30, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Test"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentMedications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsuranceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "Penicillin",
                            BloodType = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentMedications = "Lisinopril 10mg daily, Metformin 500mg twice daily",
                            EmergencyContactName = "Lorem Ipsum",
                            EmergencyContactPhoneNumber = "000000",
                            EmergencyContactRelationship = "Father",
                            HealthHistory = "John Doe, born on January 1, 1980, has a medical history that includes hypertension, Type 2 diabetes, and asthma. He takes 10mg of Lisinopril daily, 500mg of Metformin twice daily, and uses an Albuterol inhaler as needed. In the past, he underwent an appendectomy in 2010 and knee arthroscopy in 2015. He has an allergy to penicillin. His family history shows that his father has hypertension and his mother has Type 2 diabetes. John is a non-smoker and consumes alcohol occasionally.",
                            InsuranceType = 1,
                            IsDeleted = false,
                            SocialSecurityNumber = "1554447878",
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            Allergies = "None known",
                            BloodType = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentMedications = "Levothyroxine 50mcg daily (for hypothyroidism), Sumatriptan (as needed for migraines)",
                            EmergencyContactName = "Lorem Ipsum",
                            EmergencyContactPhoneNumber = "000000",
                            EmergencyContactRelationship = "Sister",
                            HealthHistory = "Jane Smith, born on February 15, 1975, has a medical history that includes hypothyroidism, chronic migraines, and osteoarthritis. She takes 50mcg of Levothyroxine daily and Sumatriptan as needed for migraines. In the past, she underwent gallbladder removal surgery in 2012 and a hysterectomy in 2018. She has no known allergies. Her family history includes her father having coronary artery disease and her mother suffering from rheumatoid arthritis. Jane does not smoke and drinks alcohol socially.",
                            InsuranceType = 2,
                            IsDeleted = false,
                            SocialSecurityNumber = "9223246896",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Domain.Entities.PatientReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("PatientReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Test",
                            IsDeleted = false,
                            Title = "Test"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Details = "Test2",
                            IsDeleted = false,
                            Title = "Test2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SupportRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SupportRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Content",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "loremipsum@loremipsum.com",
                            FirstName = "Lorem",
                            IsDeleted = false,
                            LastName = "Ipsum",
                            PhoneNumber = "1234567890",
                            Title = "Title"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Content2",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "loremipsum2@loremipsum2.com",
                            FirstName = "Lorem2",
                            IsDeleted = false,
                            LastName = "Ipsum2",
                            PhoneNumber = "1234567890",
                            Title = "Title2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasBaseType("Core.Entities.BaseUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin",
                            FirstName = "admin",
                            IsDeleted = false,
                            LastName = "admin",
                            PasswordHash = new byte[] { 182, 26, 122, 26, 113, 228, 51, 245, 212, 101, 167, 78, 135, 250, 191, 71, 244, 226, 100, 100, 84, 13, 49, 7, 77, 180, 55, 224, 191, 212, 252, 202, 232, 126, 148, 25, 80, 177, 33, 79, 93, 31, 82, 99, 119, 156, 219, 173, 131, 57, 137, 88, 149, 53, 23, 176, 129, 238, 112, 162, 147, 143, 82, 95 },
                            PasswordSalt = new byte[] { 69, 28, 19, 73, 126, 242, 134, 100, 177, 211, 26, 41, 221, 154, 186, 39, 233, 223, 208, 187, 129, 126, 172, 138, 66, 182, 93, 46, 193, 37, 103, 103, 85, 70, 229, 107, 145, 46, 77, 196, 0, 197, 142, 126, 88, 220, 31, 157, 228, 179, 156, 159, 88, 57, 1, 150, 78, 154, 174, 3, 185, 250, 21, 67, 37, 3, 32, 129, 221, 11, 39, 79, 255, 167, 191, 70, 13, 185, 28, 54, 56, 33, 28, 73, 25, 227, 117, 10, 188, 13, 119, 138, 27, 75, 35, 46, 215, 100, 106, 46, 237, 19, 21, 84, 133, 236, 109, 15, 134, 21, 225, 105, 10, 154, 9, 180, 2, 78, 88, 249, 24, 134, 103, 4, 33, 49, 30, 190 },
                            UserType = "admin",
                            Address = "address",
                            BirthDate = new DateTime(1900, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = 35,
                            Gender = 1,
                            PhoneNumber = "1111111",
                            PhotoUrl = "photoUrl"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string",
                            FirstName = "string",
                            IsDeleted = false,
                            LastName = "string",
                            PasswordHash = new byte[] { 124, 53, 227, 228, 190, 68, 30, 10, 192, 8, 146, 115, 146, 83, 219, 62, 197, 55, 220, 68, 166, 64, 22, 124, 175, 250, 111, 147, 186, 13, 105, 135, 171, 227, 139, 188, 132, 46, 216, 88, 86, 70, 109, 163, 208, 128, 45, 117, 124, 22, 27, 14, 40, 139, 225, 27, 87, 72, 198, 162, 130, 117, 217, 240 },
                            PasswordSalt = new byte[] { 216, 97, 190, 132, 68, 147, 192, 93, 21, 215, 32, 89, 220, 32, 219, 182, 41, 108, 91, 13, 232, 6, 128, 41, 0, 45, 109, 6, 245, 136, 1, 61, 245, 113, 119, 228, 137, 171, 247, 119, 168, 63, 140, 56, 68, 186, 84, 8, 163, 43, 139, 72, 76, 53, 46, 50, 218, 236, 167, 139, 62, 230, 2, 65, 11, 41, 36, 170, 74, 232, 183, 150, 235, 199, 196, 149, 107, 55, 53, 224, 93, 245, 160, 150, 149, 211, 131, 206, 190, 37, 189, 148, 144, 19, 75, 216, 99, 80, 126, 21, 3, 245, 113, 128, 105, 218, 177, 143, 80, 218, 66, 207, 194, 22, 174, 138, 36, 117, 33, 58, 45, 179, 239, 79, 108, 26, 219, 178 },
                            UserType = "doctor",
                            Address = "address",
                            BirthDate = new DateTime(1900, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = 35,
                            Gender = 1,
                            PhoneNumber = "1111111",
                            PhotoUrl = "photoUrl"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string3",
                            FirstName = "string3",
                            IsDeleted = false,
                            LastName = "string3",
                            PasswordHash = new byte[] { 124, 53, 227, 228, 190, 68, 30, 10, 192, 8, 146, 115, 146, 83, 219, 62, 197, 55, 220, 68, 166, 64, 22, 124, 175, 250, 111, 147, 186, 13, 105, 135, 171, 227, 139, 188, 132, 46, 216, 88, 86, 70, 109, 163, 208, 128, 45, 117, 124, 22, 27, 14, 40, 139, 225, 27, 87, 72, 198, 162, 130, 117, 217, 240 },
                            PasswordSalt = new byte[] { 216, 97, 190, 132, 68, 147, 192, 93, 21, 215, 32, 89, 220, 32, 219, 182, 41, 108, 91, 13, 232, 6, 128, 41, 0, 45, 109, 6, 245, 136, 1, 61, 245, 113, 119, 228, 137, 171, 247, 119, 168, 63, 140, 56, 68, 186, 84, 8, 163, 43, 139, 72, 76, 53, 46, 50, 218, 236, 167, 139, 62, 230, 2, 65, 11, 41, 36, 170, 74, 232, 183, 150, 235, 199, 196, 149, 107, 55, 53, 224, 93, 245, 160, 150, 149, 211, 131, 206, 190, 37, 189, 148, 144, 19, 75, 216, 99, 80, 126, 21, 3, 245, 113, 128, 105, 218, 177, 143, 80, 218, 66, 207, 194, 22, 174, 138, 36, 117, 33, 58, 45, 179, 239, 79, 108, 26, 219, 178 },
                            UserType = "doctor",
                            Address = "address",
                            BirthDate = new DateTime(1900, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = 35,
                            Gender = 1,
                            PhoneNumber = "1111111",
                            PhotoUrl = "photoUrl"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "string4",
                            FirstName = "string4",
                            IsDeleted = false,
                            LastName = "string4",
                            PasswordHash = new byte[] { 124, 53, 227, 228, 190, 68, 30, 10, 192, 8, 146, 115, 146, 83, 219, 62, 197, 55, 220, 68, 166, 64, 22, 124, 175, 250, 111, 147, 186, 13, 105, 135, 171, 227, 139, 188, 132, 46, 216, 88, 86, 70, 109, 163, 208, 128, 45, 117, 124, 22, 27, 14, 40, 139, 225, 27, 87, 72, 198, 162, 130, 117, 217, 240 },
                            PasswordSalt = new byte[] { 216, 97, 190, 132, 68, 147, 192, 93, 21, 215, 32, 89, 220, 32, 219, 182, 41, 108, 91, 13, 232, 6, 128, 41, 0, 45, 109, 6, 245, 136, 1, 61, 245, 113, 119, 228, 137, 171, 247, 119, 168, 63, 140, 56, 68, 186, 84, 8, 163, 43, 139, 72, 76, 53, 46, 50, 218, 236, 167, 139, 62, 230, 2, 65, 11, 41, 36, 170, 74, 232, 183, 150, 235, 199, 196, 149, 107, 55, 53, 224, 93, 245, 160, 150, 149, 211, 131, 206, 190, 37, 189, 148, 144, 19, 75, 216, 99, 80, 126, 21, 3, 245, 113, 128, 105, 218, 177, 143, 80, 218, 66, 207, 194, 22, 174, 138, 36, 117, 33, 58, 45, 179, 239, 79, 108, 26, 219, 178 },
                            UserType = "doctor",
                            Address = "address",
                            BirthDate = new DateTime(1900, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = 35,
                            Gender = 1,
                            PhoneNumber = "1111111",
                            PhotoUrl = "photoUrl"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 239, 28, 39, 143, 80, 7, 248, 165, 169, 4, 48, 166, 128, 146, 188, 143, 40, 158, 122, 12, 134, 146, 222, 18, 144, 163, 167, 47, 88, 167, 133, 52, 19, 3, 24, 107, 21, 75, 140, 164, 24, 246, 42, 75, 22, 156, 125, 114, 226, 187, 0, 96, 90, 57, 48, 232, 221, 226, 151, 207, 81, 180, 245, 159 },
                            PasswordSalt = new byte[] { 64, 193, 30, 126, 132, 162, 166, 192, 244, 178, 74, 151, 108, 67, 203, 44, 253, 121, 66, 160, 58, 197, 6, 166, 192, 110, 245, 221, 212, 128, 232, 42, 94, 176, 26, 30, 121, 59, 6, 147, 193, 55, 222, 115, 241, 33, 144, 64, 54, 220, 31, 194, 233, 107, 165, 190, 175, 207, 197, 184, 138, 58, 20, 206, 147, 219, 128, 246, 236, 80, 152, 140, 57, 169, 142, 109, 19, 147, 39, 90, 167, 5, 204, 235, 147, 8, 59, 240, 193, 241, 136, 70, 124, 64, 184, 161, 188, 19, 68, 228, 59, 144, 184, 168, 53, 209, 63, 237, 178, 228, 84, 231, 145, 6, 46, 191, 131, 145, 184, 226, 60, 79, 200, 126, 255, 101, 170, 100 },
                            UserType = "patient",
                            Address = "address",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = 34,
                            Gender = 1,
                            PhoneNumber = "1111111",
                            PhotoUrl = "photoUrl"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janesmith",
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            PasswordHash = new byte[] { 214, 149, 137, 196, 243, 194, 183, 249, 177, 142, 84, 83, 205, 116, 110, 16, 40, 185, 128, 121, 185, 162, 242, 13, 64, 176, 52, 61, 209, 253, 63, 134, 90, 170, 23, 173, 233, 45, 77, 140, 210, 215, 115, 232, 168, 206, 91, 24, 13, 118, 208, 87, 214, 201, 169, 37, 225, 32, 230, 62, 235, 37, 239, 23 },
                            PasswordSalt = new byte[] { 212, 90, 231, 221, 62, 134, 158, 58, 181, 119, 108, 144, 147, 189, 125, 69, 213, 80, 107, 18, 164, 73, 27, 101, 242, 66, 202, 27, 81, 222, 36, 222, 158, 206, 253, 121, 251, 61, 143, 158, 122, 46, 190, 194, 27, 203, 192, 242, 64, 107, 2, 162, 97, 47, 162, 14, 147, 205, 27, 208, 131, 1, 113, 218, 130, 182, 20, 165, 234, 48, 150, 215, 9, 234, 135, 116, 214, 182, 137, 3, 75, 203, 165, 244, 131, 104, 192, 122, 235, 139, 166, 181, 16, 17, 66, 238, 74, 228, 233, 151, 155, 64, 93, 23, 83, 116, 151, 242, 72, 246, 202, 60, 46, 222, 196, 154, 127, 251, 207, 219, 222, 13, 141, 117, 206, 113, 26, 216 },
                            UserType = "patient",
                            Address = "address",
                            BirthDate = new DateTime(1975, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = 6,
                            Gender = 1,
                            PhoneNumber = "1111111",
                            PhotoUrl = "photoUrl"
                        });
                });

            modelBuilder.Entity("Core.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.BaseUser", "BaseUser")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("BaseUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BaseUser");

                    b.Navigation("OperationClaim");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.DoctorAvailability", "DoctorAvailability")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorAvailabilityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DoctorAvailability");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorAvailability", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PatientReport", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("PatientReports")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Core.Entities.BaseUser", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("PatientReports");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorAvailabilities");
                });

            modelBuilder.Entity("Domain.Entities.DoctorAvailability", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
